#!/usr/bin/perl -w
# #############

## ESYNC - Electronic Syncronisation Script
## ========================================
##
## Version 1.0, Copyright (C) 2006  Christian "metax." Simon
## Esync comes with NO WARRANTY.
## Esync is free software
##
## =========================================
## Esync is licensed under the "GNU General Public License" (GPL) Version 2.
## For more information look at the file "LICENSE".

use strict;
use Term::ANSIColor qw(:constants);

### START OPTIONS #########

my $esyncdir = '$ENV{HOME}/esync'; # No ending slashes !
my $remote_esyncdir = "/home/esync";
my $remote_server = '';
my $remote_user = '';
my $alwaystar = 0;

### END OPTIONS ###########

my $cmd_mount = 'sshfs {REMOTE_USER}@{REMOTE_ADDR}:{REMOTE_DIR} {LOCAL_DIR}/remote';
my $cmd_umount = 'fusermount -u {LOCAL_DIR}/remote';

sub startup()
{
	# Print startup Messages and do startup stuff
	print BOLD CYAN "Esync 1.0 (Perl, Linux)".RESET."\n\n";
	#print ' ['.BOLD.GREEN.'*'.RESET.'] Opening Connection ...'."\n";
	print BOLD.YELLOW.'Please enter the password for the server account:'.RESET."\n";
	`$cmd_mount`;
	print "\n";
	if(-e $esyncdir.'/remote/.esyncdir')
	{
		print ' ['.BOLD.GREEN.'*'.RESET.'] Opening Connection ... ['.BOLD.GREEN.'OK'.RESET.']'."\n";
	}
	else
	{
		print ' ['.BOLD.GREEN.'*'.RESET.'] Opening Connection ... ['.BOLD.RED.'ERROR'.RESET.']'."\n\n";
		print BOLD.RED.'Not connected or server directory invalid! Quitting ...'.RESET."\n";
		print 'Trying to disconnect ...'."\n";
		`$cmd_umount`;
		exit 1;
	}

}

sub cleanup()
{
	# Umount, etc.

	`$cmd_umount`;

	if(-e $esyncdir.'/remote/files.esync')
	{
		print ' ['.BOLD.GREEN.'*'.RESET.'] Closing connection ... ['.BOLD.RED.'ERROR'.RESET.']'."\n";
	}
	else
	{
		print ' ['.BOLD.GREEN.'*'.RESET.'] Closing connection ... ['.BOLD.GREEN.'OK'.RESET.']'."\n\n";
	}


	print 'Program stopped.'.RESET."\n\n";

}

sub main()
{
	
	#for (my $i = 0; $i <= $#ARGV; $i++) {
	#	print "Parameter $i is: ".$ARGV[$i]."\n";
	#}

	if(lc($ARGV[0]) eq '--help') # Help
	{
		print "There is no help text, yet.\nPlease read the tutorial (doc/tutorial-de.htm)\n";
		exit 0;
	}
	elsif(lc($ARGV[0]) eq '--list-keys')
	{
		&list_keys;
		exit 0;
	}
	elsif(lc($ARGV[0]) eq '--list')
	{
		&list;
		exit 0;
	}
	elsif(lc($ARGV[0]) eq '--update-keys')
	{
		&update_keys;
		exit 0;
	}
	elsif(lc($ARGV[0]) eq '--export-key')
	{
		&export_key;
		exit 0;
	}
	elsif(lc($ARGV[0]) eq '--clean')
	{
		&clean;
		exit 0;
	}
	elsif(lc($ARGV[0]) eq '--get')
	{
		&get;
		exit 0;
	}
	elsif(lc($ARGV[0]) eq '--make')
	{
		&make;
		exit 0;
	}
	else
	{
		print BOLD 'Usage:'.RESET."\n\n";
		print ' esync --help'."\n";
		print ' esync --usage'."\n\n";
		print ' esync --clean'."\n\n";
		print ' esync --list-keys'."\n";
		print ' esync --update-keys'."\n";
		print ' esync --export-key '.BOLD GREEN.'key'.RESET."\n\n";
		print ' esync --list'."\n";
		print ' esync --get [--download|--decode|--unzip|--untar] '.BOLD MAGENTA.'package'.RESET."\n";
		print ' esync --make [--noencode|--for:'.BOLD GREEN.'receiver'.RESET.'] '.BOLD MAGENTA.'package '.BOLD YELLOW.'file1'.RESET.' ['.BOLD YELLOW.'file2'.RESET.' ['.BOLD YELLOW.'file3'.RESET.' ['.BOLD YELLOW.'...'.RESET.']]]'.RESET."\n\n";
		exit 0;
	}

}

sub list_keys()
{
	# List available GPG keys
	print 'Private keys (decrypt):'.RESET."\n";
	my $buffer = `gpg --list-secret-keys`;
	while($buffer =~ /^uid\s*(\S.*)$/gm) { print ' ['.BOLD.GREEN.'*'.RESET.'] '.BOLD GREEN.$1.RESET."\n" }
	print 'Public keys (encrypt):'.RESET."\n";
	$buffer = `gpg --list-keys`;
	while($buffer =~ /^uid\s*(\S.*)$/gm) { print ' ['.BOLD.GREEN.'*'.RESET.'] '.BOLD GREEN.$1.RESET."\n" }
}

sub update_keys()
{
	&startup;

	print ' ['.BOLD.GREEN.'*'.RESET.'] Scan for keys ... ['.BOLD.GREEN.'OK'.RESET.']'."\n\n";
	foreach my $filename (glob("$esyncdir/remote/keys/*.key")) 
	{
		 print `gpg --import $filename`;
	}
	
	print "\n";

	print BOLD YELLOW "Hint: New imported keys are usually identified as \"untrusted\" by GPG.\nWhen you are sure that the key is genuine, you can sign the key,\nso you don't get a warning by GPG every time:\n".GREEN."gpg --sign-key key".RESET."\n\n";

	&cleanup;
}

sub export_key()
{
	if($#ARGV != 1)
	{
		print BOLD.RED.'Wrong syntax! Please use the following syntax for --eyport-key:'.RESET."\n";
		print ' esync --export-key '.BOLD GREEN.'key'.RESET."\n";
		exit 1;
	}
	&locksandbox;
	`gpg --export -a $ARGV[1] > $esyncdir/sandbox/$ARGV[1].key`;
	if(-z "$esyncdir/sandbox/$ARGV[1].key")
	{
		&unlocksandbox;
		exit 1;
	}

	my $md5 = `md5sum $esyncdir/sandbox/$ARGV[1].key`;
	chomp($md5);
	$md5 =~ s/^(\w+) .*$/$1/;
	print ' ['.BOLD.GREEN.'*'.RESET.'] Calculate hash ... ['.BOLD.GREEN.'OK'.RESET.']'."\n";
	`mv $esyncdir/sandbox/$ARGV[1].key $esyncdir/sandbox/$md5.key`;
	&startup;
	`cp $esyncdir/sandbox/$md5.key $esyncdir/remote/keys/$md5.key`;
	print ' ['.BOLD.GREEN.'*'.RESET.'] Uploading ... ['.BOLD.GREEN.'OK'.RESET.']'."\n";
	&unlocksandbox;
	&cleanup;
}

sub clean()
{
	`rm -R $esyncdir/sandbox/*`;
	print ' ['.BOLD.GREEN.'*'.RESET.'] Cleaning temporary files ... ['.BOLD.GREEN.'OK'.RESET.']'."\n";
}

sub list()
{
	# List Packages
	&startup;

	my @filelist = ();
	foreach (glob("$esyncdir/remote/files/*.esync"))
	{
		s/^.*\/(\w+)\.esync/$1/i; # Remove basedir and extension
		push(@filelist,$_);
	}
	@filelist = sort(@filelist);

	print `clear`;
	print("\n".BOLD YELLOW."TAR".RESET." - ".BOLD GREEN."Encrypted".RESET."              - ".BOLD CYAN."Package size".RESET." - ".BOLD MAGENTA."Package name".RESET."\n".('=' x 3).'   '.('=' x 22).'   '.('=' x 12).'   '.('=' x 22)."\n");

	foreach my $file (@filelist)
	{

		my $size = 0;
		my $sizestr = '';
		my $enc = '*';
		my $tar = '0';

		# Size
		$size = -s "$esyncdir/remote/files/$file.esync";
		if($size >= 1073741824)
		{ $sizestr = sprintf("%.2f", $size/1073741824). ' GB'; }
		elsif($size >= 1048576)
		{ $sizestr = sprintf("%.2f", $size/1048576). ' MB'; }
		elsif($size >= 1024)
		{ $sizestr = sprintf("%.2f", $size/1024). ' KB'; }
		else
		{ $sizestr = sprintf("%.2f", $size). ' B'; }

		my $infos = `cat $esyncdir/remote/info/$file.info`;
		chomp ($infos);
		#print $infos;


		if($infos =~ /$file:(\w+|\*):(0|t)/i)
		{
			print BOLD YELLOW;
			print 'Yes' if($2 eq 't');
			print 'No ' if($2 eq '0');
			print RESET;
			print '   ';
			print BOLD GREEN;
			print '<not encrypted>       ' if($1 eq '*');
			print 'For "'.$1.'"'.(' ' x (16 - length($1))) if($1 ne '*' && (length($1) <= 16));
			print 'For "'.substr($1,0,13).'..."' if($1 ne '*' && (length($1) > 16));
			print RESET;
			print '   ';
			print BOLD CYAN;
			print $sizestr.(' ' x (12 - length($sizestr)));
			print RESET;
			print '   ';
			print BOLD MAGENTA;
			print $file;
			print RESET;			
			

			print "\n";
		}
		else
		{
			print BOLD RED."The package \"$file\" has an invalid meta data set!".RESET."\n";
		}
	}

	#print RESET."\Press <ENTER> to continue.";
	#<STDIN>; # ENTER

	print "\n";
	&cleanup;	
}

sub get()
{
	# Retrive a packet
	
	my $pakname = 'unknown'; # packet name
	my $encode = 0; # gpg use
	my $enc_for = ''; # gpg recipient
	my $enc_str = '';
	my $tar = 0; # tarball?
	my $tar_str = 'No';

	my $size = 0;
	my $sizestr = '';
	
	my $fetchlevel = 0;
	# Fetchlevel: What should be done?
	# 0: Download
	# 1: Decode
	# 2: unzip
	# 3: untar
	my $fetchstr = '';

	my $commandline = ''; # Commandline buffer
	foreach(@ARGV)
	{
		$commandline .= $_.' ';
	}

	if($commandline =~ /^--get (|--download|--decode|--unzip|--untar) ?(\w+) ?$/i)
	{
		$pakname = $2;
		
		if($1 =~ /^--download$/i)
		{
			$fetchlevel = 0;
			$fetchstr = 'Download only';
		}
		elsif($1 =~ /^--decode$/i)
		{
			$fetchlevel = 1;
			$fetchstr = 'Download and decrypt';
		}
		elsif($1 =~ /^--unzip$/i)
		{
			$fetchlevel = 2;
			$fetchstr = 'Download, decrypt and decompress';
		}
		else
		{
			$fetchlevel = 3;
			$fetchstr = 'Download, decrypt, decompress and extract';
		}

		&startup;

		if(!-e $esyncdir."/remote/files/$pakname.esync")
			{ print BOLD RED."There is no package with the name \"$pakname\". Please run the program with valid parameters.".RESET."\n"; &cleanup; exit 1; }
		if(!-e $esyncdir."/remote/info/$pakname.info")
			{ print BOLD RED."There is no meta data file for \"$pakname\". Probably the package is defect.".RESET."\n"; &cleanup; exit 1; }

		my $infos = `cat $esyncdir/remote/info/$pakname.info`;
		chomp ($infos);

		if($infos =~ /$pakname:(\w+|\*):(0|t)/i)
		{
			$tar = 1 if($2 eq 't');
			$tar = 0 if($2 eq '0');
			$encode = 1;
			$encode = 0 if($1 eq '*');
			$enc_for = $1 if($1 ne '*');

			$enc_str = 'No' if($1 eq '*');
			$enc_str = 'For '.$enc_for if($1 ne '*');

			$tar_str = 'Yes' if($tar == 1);
		}
		else
		{
			print BOLD RED."The package \"$pakname\" has an invalid meta data set!".RESET."\n";
			&cleanup; 
			exit 1;
		}

		$size = -s "$esyncdir/remote/files/$pakname.esync";
		if($size >= 1073741824)
		{ $sizestr = sprintf("%.2f", $size/1073741824). ' GB'; }
		elsif($size >= 1048576)
		{ $sizestr = sprintf("%.2f", $size/1048576). ' MB'; }
		elsif($size >= 1024)
		{ $sizestr = sprintf("%.2f", $size/1024). ' KB'; }
		else
		{ $sizestr = sprintf("%.2f", $size). ' B'; }

		# Sure?
		print "\n".' ['.BOLD.GREEN.'*'.RESET.'] The following information was given: '."\n\n";
		print 'Package name: '.BOLD MAGENTA.$pakname.RESET."\n";
		print 'Size: '.$sizestr."\n";
		print 'Encryption: '.BOLD.GREEN.$enc_str.RESET."\n";
		print 'Tarball (Archiv): '.$tar_str."\n";
		print 'Procedure: '.$fetchstr."\n";
		print 'Do you want to continue? (Y/n) ';
		my $answer = <STDIN>;
		chomp($answer);
		if($answer !~ /^(y|j|yes|ja|)$/i)
			{ print 'The process was cancelled ...'."\n\n"; &cleanup; exit 0; }
		
		&locksandbox;
		
		print "\n".' ['.BOLD.GREEN.'*'.RESET.'] Starting now ... (this can take a while ;)'."\n";

		# Level 0: Download
		print ' ['.BOLD.GREEN.'*'.RESET.'] Downloading'."\n";
		print `cp $esyncdir/remote/files/$pakname.esync $esyncdir/sandbox/$pakname.esync`;
		print ' ['.BOLD.GREEN.'*'.RESET.'] File downloaded ... ['.BOLD.GREEN.'OK'.RESET.']'."\n";
		
		my $ext = '';
		$ext .= '.tar' if($tar == 1);
		$ext .= '.gz';
		$ext .= '.gpg' if($encode == 1);

		my $newext = '';

		if($fetchlevel == 0)
		{
			print `cp $esyncdir/sandbox/$pakname.esync $esyncdir/files/$pakname$ext`;
		}
		else
		{
			print `cp $esyncdir/sandbox/$pakname.esync $esyncdir/sandbox/$pakname$ext`;

			# Level 1: Decode
			if($encode == 1)
			{
				$newext = substr($ext,0,-4);

				print ' ['.BOLD.GREEN.'*'.RESET.'] Decoding'."\n";		
				print `gpg -o $esyncdir/sandbox/$pakname$newext --decrypt $esyncdir/sandbox/$pakname$ext`;

				if(!-e "$esyncdir/sandbox/$pakname$newext")
				{
					print BOLD RED."Decoding failed; you probably don't own the private key for this file. Cancel ...".RESET."\n"; 
					&unlocksandbox;
					&cleanup; 
					exit 1;
				}

				$ext = $newext;
				$newext = '';
				
				print ' ['.BOLD.GREEN.'*'.RESET.'] File decrypted ... ['.BOLD.GREEN.'OK'.RESET.']'."\n";
			}
				
			if($fetchlevel == 1)
			{
				print `cp $esyncdir/sandbox/$pakname$ext $esyncdir/files/$pakname$ext`;
			}
			else
			{
				# Level 2: Decompress
				$newext = substr($ext,0,-3);
				
				print ' ['.BOLD.GREEN.'*'.RESET.'] Decompressing'."\n";
				print `gzip --decompress < $esyncdir/sandbox/$pakname$ext > $esyncdir/sandbox/$pakname$newext`;
				
				$ext = $newext;
				$newext = '';
				
				print ' ['.BOLD.GREEN.'*'.RESET.'] File decompressed ... ['.BOLD.GREEN.'OK'.RESET.']'."\n";
				
				if($fetchlevel == 2 || $tar == 0) # Cannot untar, when it's no tar ;)
				{
					print `cp $esyncdir/sandbox/$pakname$ext $esyncdir/files/$pakname$ext`;
				}
				else
				{
					# Level3: Untar
					$newext = substr($ext,0,-4);
					
					print ' ['.BOLD.GREEN.'*'.RESET.'] Extracting'."\n";
					
					if(!-d "$esyncdir/files/$pakname")
					{ `mkdir $esyncdir/files/$pakname`; }

					print `tar -xf $esyncdir/sandbox/$pakname$ext -C $esyncdir/files/$pakname`;

					$ext = $newext;
					$newext = '';
					
					print ' ['.BOLD.GREEN.'*'.RESET.'] Files extracted ... ['.BOLD.GREEN.'OK'.RESET.']'."\n";
				}
			}

		}
		&unlocksandbox;
		&cleanup;
		

	}
	else
	{
		print BOLD.RED.'Wrong sytax! Please use the following syntax for --get:'.RESET."\n";
		print ' esync --get [--download|--decode|--unzip|--untar] '.BOLD MAGENTA.'package'.RESET."\n\n";
		exit 1;
	}
}

sub locksandbox()
{
	`touch $esyncdir/sandbox/$$.pid`;
}

sub unlocksandbox()
{
	`rm  $esyncdir/sandbox/$$.pid`; # remove process locker
	my @pl=glob("$esyncdir/sandbox/*.pid"); # Any remaining processes
	if($#pl == -1)
	{
		`rm -R $esyncdir/sandbox/*`;
		print ' ['.BOLD.GREEN.'*'.RESET.'] Clearing temporary files ... ['.BOLD.GREEN.'OK'.RESET.']'."\n";
	}
}

sub make ()
{
	# Make a Package ...

	# Check parameters:
	my $pakname = 'unknown'; # packet name
	my @filelist = (); # List of files (if not tar - only one file)
	my $encode = 0; # gpg use
	my $enc_for = ''; # gpg recipient
	my $enc_str = ''; # string

	my $commandline = ''; # Commandline buffer
	foreach(@ARGV)
	{
		s/ /\\ /g; # Subst. [space] to \[space]
		$commandline .= $_.' ';
	}
	#chomp($commandline);
	#print($commandline."\n");
	if($commandline =~ /^--make (|--noencode |--for:(\w+) )(\w+) ((?>\S+ ?)+)$/i)
	{
		#print '$1 (GPG): '.$1."\n";
		#print '$2 (GPG:FOR): '.$2."\n";
		#print '$3 (NAME): '.$3."\n";
		#print '$4 (FILES): '.$4."\n";

		if($1 eq '--noencode ' || $1 eq '')
			{ $encode = 0; $enc_for = ''; $enc_str = 'No encryption' }
		else
			{ $encode = 1; $enc_for = $2; $enc_str = 'Encrypt for "'.BOLD GREEN.$2.RESET.'"' }

		#print '$1 (GPG): '.$1."\n";
		#print '$2 (GPG:FOR): '.$2."\n";
		#print '$3 (NAME): '.$3."\n";
		#print '$4 (FILES): '.$4."\n";


		$pakname = $3;
		@filelist = split(/(?<!\\) /,$4);
		my $filestr = join(RESET.', '.BOLD.YELLOW,@filelist);
		$filestr =~ s/\\ / /g; # Subst. \[space] to [space]

		foreach (@filelist) # valid files?
		{
			s/\\ / /g; # Subst. \[space] to [space]
			if(!-e $_)
				{ print BOLD RED."The given file \"$_\" does not exist. Please start the program with valid parameters.".RESET."\n"; exit 1; }
		}


		&startup;

		# valid name?
		if(-e $esyncdir."/files/$pakname.esync")
			{ print BOLD RED."A package with name \"$pakname\" already exists. Please start the program with valid parameters.".RESET."\n"; &cleanup; exit 1; }
		if(-e $esyncdir."/remote/files/$pakname.esync")
			{ print BOLD RED."A package with name \"$pakname\" already exists. Please start the program with valid parameters.".RESET."\n"; &cleanup; exit 1; }
		if(!-w $esyncdir."/files/")
			{ print BOLD RED."The package \"$pakname\" cannot be created.\nPlease make sure that the directory is writable.".RESET."\n"; &cleanup; exit 1; }
		`touch $esyncdir/files/$pakname.esync`;
		if(!-w $esyncdir."/files/$pakname.esync")
			{ print BOLD RED."The package \"$pakname\" can not be written to.\nUnknown error ...".RESET."\n"; &cleanup; exit 1; }
		`rm -f $esyncdir/files/$pakname.esync`;

		# Valid Identity
		if($encode == 1 && $enc_for ne '*')
		{
			my $test_key = `gpg --list-keys $enc_for`;
			if($test_key !~ /$enc_for/im)
				{ print BOLD RED."GPG can't find the public key for \"$enc_for\".\nPlease ensure the public key has been imported".RESET."\n"; &cleanup; exit 1; }
		}

		# Sure?
		print "\n".' ['.BOLD.GREEN.'*'.RESET.'] Following data has been entered: '."\n\n";
		print 'Encryption: '.$enc_str."\n";
		print 'Package name: '.BOLD MAGENTA.$pakname.RESET."\n";
		print 'File(s): '.BOLD YELLOW.$filestr.RESET."\n\n";
		print 'Do you want to continue? (Y/n) ';
		my $answer = <STDIN>;
		chomp($answer);
		if($answer !~ /^(y|j|yes|ja|)$/i)
			{ print 'The process was cancelled ...'."\n\n"; &cleanup; exit 0; }
		

		# Everything seems O.K.

		print "\n".' ['.BOLD.GREEN.'*'.RESET.'] Starting now ... (this can take a while ;)'."\n";

		&locksandbox;

		# Schritt 1: Tar ?
		my $tar = 0;
		if($#filelist > 0 || -d $filelist[0] || $alwaystar == 1)
		{
			# TAR
			$tar = 1;
			my $tarlist = '';
			foreach (@filelist) # Convert Blanks
			{
				s/ /\\ /g; # Subst. [space] to \[space]
				$tarlist .= $_.' ';
				
			}
			chomp($tarlist);
			print ' ['.BOLD.GREEN.'*'.RESET.'] Packing (tar)'."\n";
			print `tar cf $esyncdir/sandbox/$pakname.file $tarlist`;
			if(!-e "$esyncdir/sandbox/$pakname.file")
				{ print BOLD RED."Packing not successful.\nUnknown error ...".RESET."\n"; &cleanup; exit 1; }
			print ' ['.BOLD.GREEN.'*'.RESET.'] Files packed (tar) ... ['.BOLD.GREEN.'OK'.RESET.']'."\n";
		}
		else
		{
			# COPY
			my $shfile = $filelist[0];
			$shfile =~ s/ /\\ /g;
			print ' ['.BOLD.GREEN.'*'.RESET.'] Copying'."\n";
			print `cp  $shfile $esyncdir/sandbox/$pakname.file`;
			print ' ['.BOLD.GREEN.'*'.RESET.'] File copied ... ['.BOLD.GREEN.'OK'.RESET.']'."\n";
		}

		# Schritt 2: GZIP
		print ' ['.BOLD.GREEN.'*'.RESET.'] Compressing'."\n";
		print `gzip < $esyncdir/sandbox/$pakname.file > $esyncdir/sandbox/$pakname.file.gz`;
		print ' ['.BOLD.GREEN.'*'.RESET.'] File compressed ... ['.BOLD.GREEN.'OK'.RESET.']'."\n";

		# Schritt 2: GPG
		if($encode == 0)
		{
			print ' ['.BOLD.GREEN.'*'.RESET.'] Encryption: disabled ... ['.BOLD.YELLOW.'Skipped'.RESET.']'."\n";

			print ' ['.BOLD.GREEN.'*'.RESET.'] Uploading'."\n";
			print `cp $esyncdir/sandbox/$pakname.file.gz $esyncdir/remote/files/$pakname.esync`;
			print ' ['.BOLD.GREEN.'*'.RESET.'] File uploaded ... ['.BOLD.GREEN.'OK'.RESET.']'."\n";
		}
		else
		{	
			print ' ['.BOLD.GREEN.'*'.RESET.'] Encrypting'."\n";
			print `gpg --encrypt -r $enc_for $esyncdir/sandbox/$pakname.file.gz`;
			print ' ['.BOLD.GREEN.'*'.RESET.'] File Encrypted ['.BOLD.GREEN.'OK'.RESET.']'."\n";

			print ' ['.BOLD.GREEN.'*'.RESET.'] Uploading'."\n";
			print `cp $esyncdir/sandbox/$pakname.file.gz.gpg $esyncdir/remote/files/$pakname.esync`;
			print ' ['.BOLD.GREEN.'*'.RESET.'] File uploaded ... ['.BOLD.GREEN.'OK'.RESET.']'."\n";
		}

		# Schritt 3: Infos
		my $theinfo = "$pakname:";
		if($encode == 1)
		{
			$theinfo .= $enc_for;
		}
		else
		{
			$theinfo .= '*';
		}
		$theinfo .= ':';
		if($tar == 1)
		{
			$theinfo .= 't';
		}
		else
		{
			$theinfo .= '0';
		}
		`echo \'$theinfo\' >> $esyncdir/remote/info/$pakname.info`;
		print ' ['.BOLD.GREEN.'*'.RESET.'] Storing package meta data ... ['.BOLD.GREEN.'OK'.RESET.']'."\n";

		# Schritt 4: Sandbox leeren
		&unlocksandbox;


		# Fertig
		&cleanup;
	}
	else
	{
		print BOLD.RED.'Wrong syntax! Please use the following syntax for --make:'.RESET."\n";
		print ' esync --make [--noencode|--for:'.BOLD GREEN.'receiver'.RESET.'] '.BOLD MAGENTA.'package '.BOLD YELLOW.'file1'.RESET.' ['.BOLD YELLOW.'file2'.RESET.' ['.BOLD YELLOW.'file3'.RESET.' ['.BOLD YELLOW.'...'.RESET.']]]'.RESET."\n\n";
		exit 1;
	}
	
	
}


sub test()
{
	# Test, if esync can run ...
	if(!$<)
	{
		print BOLD YELLOW."Mommy always said: \"Don't work as root!\"".RESET."\n<continue>";
		<STDIN>;
	}

	if(!`which gpg`)
	{
		print BOLD RED."Esync requires the program gpg (http://www.gnupg.org/)!".RESET."\n";
		exit 1;
	}
	if(!`which tar`)
	{
		print BOLD RED."Esync requires the program tar!".RESET."\n";
		exit 1;
	}
	if(!`which gzip`)
	{
		print BOLD RED."Esync requires the program gzip!".RESET."\n";
		exit 1;
	}
}

sub iniload()
{
	

	# Load INI Data
	my $theini;
	if(-e "$ENV{HOME}/.esync")
	{
		$theini = `cat $ENV{HOME}/.esync`;
	}
	elsif(-e "/etc/esyncrc")
	{
		$theini = `cat /etc/esyncrc`;
	}
	else
	{
		print BOLD RED."Error: No settings found!\n".
		"Settings must be stored in file ".BOLD YELLOW."$ENV{HOME}/.esync".BOLD RED." (for this user) or ".
		BOLD.YELLOW."/etc/esyncrc".BOLD RED." (for all users).".RESET."\n\n";
		
		print BOLD YELLOW."Do you want esync to create an example config in $ENV{HOME}/.esync? (Y/n) ".RESET;
		my $answer = <STDIN>;
		chomp($answer);
		if($answer =~ /^(j|y|ja|yes|)$/i)
		{
			print "\n".' ['.BOLD.GREEN.'*'.RESET.'] Creating config in '.$ENV{HOME}.'/.esync  ... ['.BOLD.GREEN.'OK'.RESET.']'."\n\n";

			my $conf = <<EXAMPLE_CONFIG
# Example config file for esync
#
# Local directory: LOCAL_DIR
# ==========================
# THis directory contains the subdirectories "sandbox", "remote" and "files"
# In "sandbox" temporary files are stored,
# in "remote"the remote file system is mounted via sshfs and
# in "files" downlopaded files are stored.
# The directory LOCAL_DIR, and the subdirectories have to be created by hand.
#
# Remote Filesystem
# =================
# A remote server, accessable via ssh, is required to store the packages.
# It is best to create a neutral server account with an empty directory for esync, including the subdirectories:
# "files" (for packages)
# "info" (for package meta data)
# "keys" (for public keys).
# THese directories have to be created by hand.
# Additionally, the remote directory has to contain an empty file ".esyncdir",
# so esync will detect that this directory is a valid location.
# The variables are
# REMOTE_ADDR (server address)
# REMOTE_USER (server user account)
# REMOTE_DIR (absolute path of the esync dir on the server)
#
# Optionen
# ========
# ALWAYS_TAR (This option forces esync to always create a tar archive, even if the package consists of only one file)
#
# Mount-Commands
# ==============
# You can change the commands used for mounting. Usually this should not be necessary, unless:
# *) you can't mount sshfs as user ("fuse" has to be installed and running; additionally you should be in group "fuse")
# *) you want to mount sshfs with another command than sshfs
# *) you are using another interface to the server, like NFS
# The condif parameters can contain other configuration parameters (e.g. {LOCAL_DIR}) for the mount commands.


# Example:
# LOCAL_DIR=/home/yourname/esync
# REMOTE_ADDR=123.45.67.89
# REMOTE_USER=esync
# REMOTE_DIR=/home/esync/
# ALWAYS_TAR
# MOUNT=sshfs {REMOTE_USER}\@{REMOTE_ADDR}:{REMOTE_DIR} {LOCAL_DIR}/remote
# UMOUNT=fusermount -u {LOCAL_DIR}/remote

# real config starts here

LOCAL_DIR=$ENV{HOME}/esync
REMOTE_ADDR=
REMOTE_USER=esync
REMOTE_DIR=/home/esync/

EXAMPLE_CONFIG
;

		my $file = open(FILE,">$ENV{HOME}/.esync");
		if(not defined($file)) {
			die "Error creating the file: $!\n";
		}
		print FILE $conf;
		close(FILE);

		}
		exit 1;
	}

	# Interpret INI
	my @lines = split(/\n/,$theini);
	foreach my $line (@lines)
	{
		if($line !~ /^(#|$)/)
		{
			if($line =~ /^LOCAL_DIR\s*=\s*(.+)$/i)
			{
				$esyncdir = $1;
			}
			elsif($line =~ /^REMOTE_DIR\s*=\s*(.+)$/i)
			{
				$remote_esyncdir = $1;
			}
			elsif($line =~ /^REMOTE_USER\s*=\s*(.+)$/i)
			{
				$remote_user = $1;
			}
			elsif($line =~ /^REMOTE_ADDR\s*=\s*(.+)$/i)
			{
				$remote_server = $1;
			}
			elsif($line =~ /^ALWAYS_?TAR/i)
			{
				$alwaystar = 1;
			}
			elsif($line =~ /^MOUNT\s*=\s*(.+)$/i)
			{
				$cmd_mount = $1;
			}
			elsif($line =~ /^UMOUNT\s*=\s*(.+)$/i)
			{
				$cmd_umount = $1;
			}
		}
	}
	if($esyncdir =~ m#^(.*)/$#) # Remove ending slash!
	{
		$esyncdir = $1;
	}
	if($remote_esyncdir =~ m#^(.*)/$#) # Remove ending slash!
	{
		$remote_esyncdir = $1;
	}

	# Update MOUNT/UMOUNT commands:
	$_ = $cmd_mount;
	s/\{REMOTE_USER\}/$remote_user/ig;
	s/\{REMOTE_ADDR\}/$remote_server/ig;
	s/\{REMOTE_DIR\}/$remote_esyncdir/ig;
	s/\{LOCAL_DIR\}/$esyncdir/ig;
	$cmd_mount = $_;

	$_ = $cmd_umount;
	s/\{REMOTE_USER\}/$remote_user/ig;
	s/\{REMOTE_ADDR\}/$remote_server/ig;
	s/\{REMOTE_DIR\}/$remote_esyncdir/ig;
	s/\{LOCAL_DIR\}/$esyncdir/ig;
	$cmd_umount = $_;
}


&test();
&iniload();

### Start Main Script
&main();